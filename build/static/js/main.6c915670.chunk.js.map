{"version":3,"sources":["app.js","index.js"],"names":["App","image","setImage","useState","imagePreviewUrl","setImagePreviewUrl","question","setQuestion","answer","setAnswer","loading","setLoading","error","setError","_jsxs","className","children","_jsx","onSubmit","async","event","preventDefault","alert","formData","FormData","append","response","axios","post","headers","data","console","type","onChange","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","placeholder","value","disabled","src","alt","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"4LAqGeA,MAjGHA,KACV,MAAOC,EAAOC,GAAYC,mBAAS,OAC5BC,EAAiBC,GAAsBF,mBAAS,OAChDG,EAAUC,GAAeJ,mBAAS,KAClCK,EAAQC,GAAaN,mBAAS,KAC9BO,EAASC,GAAcR,oBAAS,IAChCS,EAAOC,GAAYV,mBAAS,IAgDnC,OACEW,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,OAAKF,UAAU,OAAMC,SACnBC,cAAA,MAAAD,SAAI,qBAGRF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BF,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,MAAAD,SAAI,yCACJF,eAAA,QAAMI,SAtCOC,UAEnB,GADAC,EAAMC,kBACDpB,IAAUK,EAEb,YADAgB,MAAM,gDAIR,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASxB,GACzBsB,EAASE,OAAO,WAAYnB,GAE5BK,GAAW,GACXE,EAAS,IACT,IACE,MAAMa,QAAiBC,IAAMC,KAAK,6CAA8CL,EAAU,CACxFM,QAAS,CACP,eAAgB,yBAGpBpB,EAAUiB,EAASI,KAAKtB,OAC1B,CAAE,MAAOI,GACPC,EAAS,+CACTkB,QAAQnB,MAAM,6BAA8BA,EAC9C,CAAC,QACCD,GAAW,EACb,GAamCK,SAAA,CAC3BC,cAAA,SAAOe,KAAK,OAAOC,SAzDFb,IACzB,MAAMc,EAAOd,EAAMe,OAAOC,MAAM,GAChClC,EAASgC,GAGT,MAAMG,EAAS,IAAIC,WACnBD,EAAOE,UAAY,KACjBlC,EAAmBgC,EAAOG,OAAO,EAE/BN,GACFG,EAAOI,cAAcP,EACvB,IA+CQjB,cAAA,SACEe,KAAK,OACLU,YAAY,oCACZC,MAAOrC,EACP2B,SAhDkBb,IAC5Bb,EAAYa,EAAMe,OAAOQ,MAAM,IAiDvB1B,cAAA,UAAQe,KAAK,SAASY,SAAUlC,EAAQM,SACrCN,EAAU,gBAAkB,iBAInCI,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC5BJ,GAASK,cAAA,KAAGF,UAAU,QAAOC,SAAEJ,IAC/BR,GACCU,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BC,cAAA,MAAAD,SAAI,oBACJC,cAAA,OAAK4B,IAAKzC,EAAiB0C,IAAI,wBAGlCtC,GACCM,eAAA,OAAAE,SAAA,CACEC,cAAA,MAAAD,SAAI,YACJC,cAAA,KAAAD,SAAIR,eAKR,EC5FVuC,IAASC,OACP/B,cAACgC,IAAMC,WAAU,CAAAlC,SACfC,cAACjB,EAAG,MAENmD,SAASC,eAAe,Q","file":"static/js/main.6c915670.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './app.css';\r\n\r\nconst App = () => {\r\n  const [image, setImage] = useState(null);\r\n  const [imagePreviewUrl, setImagePreviewUrl] = useState(null);\r\n  const [question, setQuestion] = useState('');\r\n  const [answer, setAnswer] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    setImage(file);\r\n\r\n    // Create a preview URL for the image\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setImagePreviewUrl(reader.result);\r\n    };\r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleQuestionChange = (event) => {\r\n    setQuestion(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!image || !question) {\r\n      alert('Please provide both an image and a question.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n    formData.append('question', question);\r\n\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/recognize_and_answer', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      setAnswer(response.data.answer);\r\n    } catch (error) {\r\n      setError('Failed to get the answer. Please try again.');\r\n      console.error('Error fetching the answer:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"sidebar\">\r\n        <div className=\"logo\">\r\n          <h1>VisionDialog</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"main-content\">\r\n        <div className=\"upload-section\">\r\n          <h2>Upload your image and ask a question</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <input type=\"file\" onChange={handleImageUpload} />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Ask a question about the image...\"\r\n              value={question}\r\n              onChange={handleQuestionChange}\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              {loading ? 'Processing...' : 'Submit'}\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"result-section\">\r\n          {error && <p className=\"error\">{error}</p>}\r\n          {imagePreviewUrl && (\r\n            <div className=\"image-preview\">\r\n              <h3>Uploaded Image:</h3>\r\n              <img src={imagePreviewUrl} alt=\"Uploaded preview\" />\r\n            </div>\r\n          )}\r\n          {answer && (\r\n            <div>\r\n              <h3>Answer:</h3>\r\n              <p>{answer}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport './app.css'; // This is optional if you want to add styles\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}